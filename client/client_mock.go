// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"context"
	"sync"
)

// Ensure, that ManticoreClientMock does implement ManticoreClient.
// If this is not the case, regenerate this file with moq.
var _ ManticoreClient = &ManticoreClientMock{}

// ManticoreClientMock is a mock implementation of ManticoreClient.
//
//	func TestSomethingThatUsesManticoreClient(t *testing.T) {
//
//		// make and configure a mocked ManticoreClient
//		mockedManticoreClient := &ManticoreClientMock{
//			ExecuteSQLFunc: func(ctx context.Context, query string) ([]map[string]interface{}, error) {
//				panic("mock out the ExecuteSQL method")
//			},
//			PingFunc: func(ctx context.Context) error {
//				panic("mock out the Ping method")
//			},
//		}
//
//		// use mockedManticoreClient in code that requires ManticoreClient
//		// and then make assertions.
//
//	}
type ManticoreClientMock struct {
	// ExecuteSQLFunc mocks the ExecuteSQL method.
	ExecuteSQLFunc func(ctx context.Context, query string) ([]map[string]interface{}, error)

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// ExecuteSQL holds details about calls to the ExecuteSQL method.
		ExecuteSQL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockExecuteSQL sync.RWMutex
	lockPing       sync.RWMutex
}

// ExecuteSQL calls ExecuteSQLFunc.
func (mock *ManticoreClientMock) ExecuteSQL(ctx context.Context, query string) ([]map[string]interface{}, error) {
	if mock.ExecuteSQLFunc == nil {
		panic("ManticoreClientMock.ExecuteSQLFunc: method is nil but ManticoreClient.ExecuteSQL was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockExecuteSQL.Lock()
	mock.calls.ExecuteSQL = append(mock.calls.ExecuteSQL, callInfo)
	mock.lockExecuteSQL.Unlock()
	return mock.ExecuteSQLFunc(ctx, query)
}

// ExecuteSQLCalls gets all the calls that were made to ExecuteSQL.
// Check the length with:
//
//	len(mockedManticoreClient.ExecuteSQLCalls())
func (mock *ManticoreClientMock) ExecuteSQLCalls() []struct {
	Ctx   context.Context
	Query string
} {
	var calls []struct {
		Ctx   context.Context
		Query string
	}
	mock.lockExecuteSQL.RLock()
	calls = mock.calls.ExecuteSQL
	mock.lockExecuteSQL.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ManticoreClientMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("ManticoreClientMock.PingFunc: method is nil but ManticoreClient.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedManticoreClient.PingCalls())
func (mock *ManticoreClientMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}
